<%= article do %>
  <%= render layout: "header", locals: { title: "An async combobox" } do %>
    <div>
      <%= combobox_tag "state", states_path, id: "state-box" %>
    </div>
  <% end %>

  <%= content do %>
    <%= paragraph do %>
      Async comboboxes are useful because no time is spent loading all the options
      before the page is rendered. Instead, options are fetched when the combobox is first opened,
      and re-fetched as the user types in the combobox.
      You might reach for one of these when you're filtering a large dataset.

      <%= sp %>
      Async comboboxes allow you to do the filtering server-side. Whenever the user types
      into the input, the combobox will perform a debounced request to your server
      to the url or path you provided. The user's input will be sent as a
      param accessible via <%= mono("params[:q]") %>.

      <%= sp %>
      You'll provide the combobox options using the
      gem's <%= mono("#async_combobox_options") %> helper.
      This needs to happen either in a <%= mono("*.turbo_stream.erb") %> template,
      or directly inside the controller.

      <%= sp %>
      Here's what that might look like:
    <% end %>

    <%=
      highlight_erb(%(
        &lt;%= combobox_tag "state", states_path, id: "state-box" %&gt;
      ), "In your template")
    %>
    
    <%=
      highlight_rb(%(
        class States &lt; ApplicationRecord
          scope :search, -&gt;(q) {
            q.blank? all : where("title LIKE ?", "\#{q}%")
          }
        end
      ), "In your model")
    %>

    <%=
      highlight_rb(%(
        class StatesController &lt; ApplicationController
          def index
            @states = State.search params[:q]
          end
        end
      ), "In your controller")
    %>

    <%=
      highlight_erb(%(
        &lt;%= async_combobox_options @states %&gt;
      ), "In views/states/index.turbo_stream.erb")
    %>

    <%= paragraph do %>
      Or, you can return the options directly from the controller:
    <% end %>

    <%=
      highlight_rb(%(
        class StatesController &lt; ApplicationController
          def index
            @states = State.search params[:q]
            render turbo_stream: helpers.async_combobox_options @states
          end
        end
      ), "In your controller, no need for a template")
    %>

    <%= paragraph do %>
      You can optionally paginate the options. Simply pass the next page number as
      <%= mono(":next_page") %> to <%= mono("#async_combobox_options") %>.
      When the user scrolls down far enough,
      the combobox will automatically request that page number in a param accessible via
      <%= mono("params[:page]") %> to the same url or path you provided.
    <% end %>

    <%= emphasis do %>
      It's very important that you pass <%= mono("nil") %> to <%= mono(":next_page") %>
      for the last page. Otherwise, the combobox will keep requesting more pages indefinitely and
      will overwhelm your server.
    <% end %>

    <%=
      highlight_erb(%(
        &lt;%# This is using geared_pagination syntax %&gt;
        &lt;%= async_combobox_options @page.records,
              next_page: @page.last? ? nil : @page.next_param %&gt;
      ), "In views/states/index.turbo_stream.erb")
    %>
  <% end %>
<% end %>
