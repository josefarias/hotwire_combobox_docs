<%= article do %>
  <%= render layout: "header", locals: { title: "A basic combobox" } do %>
    <div>
      <%= combobox_tag "state", State.all %>
    </div>
  <% end %>

  <%= content do %>
    <%= paragraph do %>
      This is a basic combobox. As plain as can be. Click on it to view all the options.
      Start typing to filter them down. Here's the code for it:
    <% end %>

    <%=
      highlight_erb(%(
        &lt;%= combobox_tag "state", State.all %&gt;
      ))
    %>

    <%= paragraph do %>
      The first param corresponds to the input's name. It's what the query param will
      be called when the form is submitted.

      <%= sp %>
      The second param is the collection of options.
      Each option has a <%= mono("display") %> (what the user sees in the combobox)
      and a <%= mono("value") %> (what gets submitted with the form).
      This param can be one of multiple things:
    <% end %>

    <ul class="md:px-0 max-w-xl px-8 space-y-4 text-lg list-disc">
      <li>
        <%= bold("ActiveRecord::Relation") %>: the <%= mono("display") %> is obtained
        by calling <%= mono("#to_combobox_display") %> on each object and the
        <%= mono("value") %> is obtained by calling <%= mono("#id") %>.
      </li>
      <li>
        <%= bold("url/path helper") %>: options are requested asynchronously from this url/path.
        This is the only way to do server-side filtering. For all other setups, filtering is done
        client-side by the library. Read on for an example of an async implementation.
      </li>
      <li>
        <%= bold("Single hash") %>: object is iterated with <%= mono("#map") %>.
        For each entry, options are determined as <%= mono("{ display: option.first, value: option.last }") %>
      </li>
      <li>
        <%= bold("Array of strings") %>: each entry is used as both <%= mono("display") %> and <%= mono("value") %>.
      </li>
      <li>
        <%= bold("Array of arrays") %>: For each entry, options are determined as <%= mono("{ display: option.first, value: option.last }") %>
      </li>
      <li>
        <%= bold("Array of hashes") %>: the <%= mono("display") %> and <%= mono("value") %>
        are provided as key-value pairs in each hash. e.g. <%= mono('{ display: :Foo, value: :id_123 }') %>.
      </li>
    </ul>

    <%= paragraph do %>
      Values, displays, and even how autocompletion and filtering work can be customized.
      Read the source code for this kind of advanced usage.
    <% end %>
  <% end %>
<% end %>
